// Generated by JavaScript APG, Version 2.0 [`apg-js2`](https://github.com/ldthomas/apg-js2)
module.exports = function(){
"use strict";
  //```
  // SUMMARY
  //      rules = 5
  //       udts = 0
  //    opcodes = 20
  //        ALT = 0
  //        CAT = 4
  //        RNM = 6
  //        UDT = 0
  //        BKR = 0
  //        REP = 3
  //        AND = 1
  //        NOT = 0
  //        BKA = 0
  //        BKN = 0
  //        TLS = 6
  //        TBS = 0
  //        TRG = 0
  // characters = [97 - 99]
  //```
  /* CALLBACK LIST PROTOTYPE (true, false or function reference) */
  this.callbacks = [];
  this.callbacks['anbn'] = false;
  this.callbacks['anbncn'] = false;
  this.callbacks['bncn'] = false;
  this.callbacks['consumeas'] = false;
  this.callbacks['prefix'] = false;

  /* OBJECT IDENTIFIER (for internal parser use) */
  this.grammarObject = 'grammarObject';

  /* RULES */
  this.rules = [];
  this.rules[0] = {name: 'AnBnCn', lower: 'anbncn', index: 0, isBkr: false};
  this.rules[1] = {name: 'Prefix', lower: 'prefix', index: 1, isBkr: false};
  this.rules[2] = {name: 'ConsumeAs', lower: 'consumeas', index: 2, isBkr: false};
  this.rules[3] = {name: 'AnBn', lower: 'anbn', index: 3, isBkr: false};
  this.rules[4] = {name: 'BnCn', lower: 'bncn', index: 4, isBkr: false};

  /* UDTS */
  this.udts = [];

  /* OPCODES */
  /* AnBnCn */
  this.rules[0].opcodes = [];
  this.rules[0].opcodes[0] = {type: 2, children: [1,3,4]};// CAT
  this.rules[0].opcodes[1] = {type: 12};// AND
  this.rules[0].opcodes[2] = {type: 4, index: 1};// RNM(Prefix)
  this.rules[0].opcodes[3] = {type: 4, index: 2};// RNM(ConsumeAs)
  this.rules[0].opcodes[4] = {type: 4, index: 4};// RNM(BnCn)

  /* Prefix */
  this.rules[1].opcodes = [];
  this.rules[1].opcodes[0] = {type: 2, children: [1,2]};// CAT
  this.rules[1].opcodes[1] = {type: 4, index: 3};// RNM(AnBn)
  this.rules[1].opcodes[2] = {type: 7, string: [99]};// TLS

  /* ConsumeAs */
  this.rules[2].opcodes = [];
  this.rules[2].opcodes[0] = {type: 3, min: 0, max: Infinity};// REP
  this.rules[2].opcodes[1] = {type: 7, string: [97]};// TLS

  /* AnBn */
  this.rules[3].opcodes = [];
  this.rules[3].opcodes[0] = {type: 2, children: [1,2,4]};// CAT
  this.rules[3].opcodes[1] = {type: 7, string: [97]};// TLS
  this.rules[3].opcodes[2] = {type: 3, min: 0, max: 1};// REP
  this.rules[3].opcodes[3] = {type: 4, index: 3};// RNM(AnBn)
  this.rules[3].opcodes[4] = {type: 7, string: [98]};// TLS

  /* BnCn */
  this.rules[4].opcodes = [];
  this.rules[4].opcodes[0] = {type: 2, children: [1,2,4]};// CAT
  this.rules[4].opcodes[1] = {type: 7, string: [98]};// TLS
  this.rules[4].opcodes[2] = {type: 3, min: 0, max: 1};// REP
  this.rules[4].opcodes[3] = {type: 4, index: 4};// RNM(BnCn)
  this.rules[4].opcodes[4] = {type: 7, string: [99]};// TLS

  // The `toString()` function will display the original grammar file(s) that produced these opcodes.
  this.toString = function(){
    var str = "";
    str += ";\n";
    str += "; text book example of a phrase which\n";
    str += "; cannot be described with a context-free grammar\n";
    str += "; but can be described using syntactic predicates\n";
    str += ";\n";
    str += "AnBnCn    = &Prefix ConsumeAs BnCn\n";
    str += "Prefix    = AnBn \"c\"\n";
    str += "ConsumeAs = *\"a\"\n";
    str += "AnBn      = \"a\" [AnBn] \"b\"\n";
    str += "BnCn      = \"b\" [BnCn] \"c\"\n";
    return str;
  }
}
