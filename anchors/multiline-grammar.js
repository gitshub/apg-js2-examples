// Generated by JavaScript APG, Version 2.0 [`apg-js2`](https://github.com/ldthomas/apg-js2)
module.exports = function(){
"use strict";
  //```
  // SUMMARY
  //      rules = 2
  //       udts = 0
  //    opcodes = 11
  //        ALT = 2
  //        CAT = 1
  //        RNM = 2
  //        UDT = 0
  //        BKR = 0
  //        REP = 0
  //        AND = 1
  //        NOT = 0
  //        BKA = 1
  //        BKN = 0
  //        TLS = 1
  //        TBS = 1
  //        TRG = 0
  // characters = [10 - 99]
  //```
  /* CALLBACK LIST PROTOTYPE (true, false or function reference) */
  this.callbacks = [];
  this.callbacks['lineend'] = false;
  this.callbacks['rule'] = false;

  /* OBJECT IDENTIFIER (for internal parser use) */
  this.grammarObject = 'grammarObject';

  /* RULES */
  this.rules = [];
  this.rules[0] = {name: 'rule', lower: 'rule', index: 0, isBkr: false};
  this.rules[1] = {name: 'lineend', lower: 'lineend', index: 1, isBkr: false};

  /* UDTS */
  this.udts = [];

  /* OPCODES */
  /* rule */
  this.rules[0].opcodes = [];
  this.rules[0].opcodes[0] = {type: 2, children: [1,5,6]};// CAT
  this.rules[0].opcodes[1] = {type: 15};// BKA
  this.rules[0].opcodes[2] = {type: 1, children: [3,4]};// ALT
  this.rules[0].opcodes[3] = {type: 4, index: 1};// RNM(lineend)
  this.rules[0].opcodes[4] = {type: 17};// ABG(%^)
  this.rules[0].opcodes[5] = {type: 7, string: [97,98,99]};// TLS
  this.rules[0].opcodes[6] = {type: 12};// AND
  this.rules[0].opcodes[7] = {type: 1, children: [8,9]};// ALT
  this.rules[0].opcodes[8] = {type: 4, index: 1};// RNM(lineend)
  this.rules[0].opcodes[9] = {type: 18};// AEN(%$)

  /* lineend */
  this.rules[1].opcodes = [];
  this.rules[1].opcodes[0] = {type: 6, string: [10]};// TBS

  // The `toString()` function will display the original grammar file(s) that produced these opcodes.
  this.toString = function(){
    var str = "";
    str += "rule = &&(lineend / %^) \"abc\" &(lineend / %$)\n";
    str += "lineend = %d10;\n";
    return str;
  }
}
