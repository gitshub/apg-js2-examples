// Generated by JavaScript APG, Version 2.0 [`apg-js2`](https://github.com/ldthomas/apg-js2)
module.exports = function(){
"use strict";
  //```
  // SUMMARY
  //      rules = 3
  //       udts = 0
  //    opcodes = 10
  //        ALT = 1
  //        CAT = 2
  //        RNM = 3
  //        UDT = 0
  //        BKR = 1
  //        REP = 0
  //        AND = 0
  //        NOT = 0
  //        BKA = 0
  //        BKN = 0
  //        TLS = 3
  //        TBS = 0
  //        TRG = 0
  // characters = [98 - 121]
  //```
  /* CALLBACK LIST PROTOTYPE (true, false or function reference) */
  this.callbacks = [];
  this.callbacks['a'] = false;
  this.callbacks['b'] = false;
  this.callbacks['parent'] = false;

  /* OBJECT IDENTIFIER (for internal parser use) */
  this.grammarObject = 'grammarObject';

  /* RULES */
  this.rules = [];
  this.rules[0] = {name: 'parent', lower: 'parent', index: 0, isBkr: false};
  this.rules[1] = {name: 'B', lower: 'b', index: 1, isBkr: false};
  this.rules[2] = {name: 'A', lower: 'a', index: 2, isBkr: true};

  /* UDTS */
  this.udts = [];

  /* OPCODES */
  /* parent */
  this.rules[0].opcodes = [];
  this.rules[0].opcodes[0] = {type: 2, children: [1,2,3]};// CAT
  this.rules[0].opcodes[1] = {type: 4, index: 2};// RNM(A)
  this.rules[0].opcodes[2] = {type: 4, index: 1};// RNM(B)
  this.rules[0].opcodes[3] = {type: 14, index: 2, lower: 'a', bkrCase: 604, bkrMode: 602};// BKR(\%i%pA)

  /* B */
  this.rules[1].opcodes = [];
  this.rules[1].opcodes[0] = {type: 2, children: [1,2]};// CAT
  this.rules[1].opcodes[1] = {type: 4, index: 2};// RNM(A)
  this.rules[1].opcodes[2] = {type: 7, string: [98]};// TLS

  /* A */
  this.rules[2].opcodes = [];
  this.rules[2].opcodes[0] = {type: 1, children: [1,2]};// ALT
  this.rules[2].opcodes[1] = {type: 7, string: [120]};// TLS
  this.rules[2].opcodes[2] = {type: 7, string: [121]};// TLS

  // The `toString()` function will display the original grammar file(s) that produced these opcodes.
  this.toString = function(){
    var str = "";
    str += "parent = A B \\%pA\n";
    str += "B = A \"b\"\n";
    str += "A = \"x\" / \"y\"\n";
    return str;
  }
}
