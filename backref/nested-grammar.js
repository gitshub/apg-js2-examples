// Generated by JavaScript APG, Version 2.0 [`apg-js2`](https://github.com/ldthomas/apg-js2)
module.exports = function(){
"use strict";
  //```
  // SUMMARY
  //      rules = 3
  //       udts = 0
  //    opcodes = 20
  //        ALT = 3
  //        CAT = 2
  //        RNM = 3
  //        UDT = 0
  //        BKR = 1
  //        REP = 1
  //        AND = 0
  //        NOT = 0
  //        BKA = 0
  //        BKN = 0
  //        TLS = 5
  //        TBS = 0
  //        TRG = 5
  // characters = [46 - 122]
  //```
  /* CALLBACK LIST PROTOTYPE (true, false or function reference) */
  this.callbacks = [];
  this.callbacks['alphanum'] = false;
  this.callbacks['name'] = false;
  this.callbacks['s'] = false;

  /* OBJECT IDENTIFIER (for internal parser use) */
  this.grammarObject = 'grammarObject';

  /* RULES */
  this.rules = [];
  this.rules[0] = {name: 'S', lower: 's', index: 0, isBkr: false, hasBkr: true};
  this.rules[1] = {name: 'name', lower: 'name', index: 1, isBkr: true, hasBkr: false};
  this.rules[2] = {name: 'alphanum', lower: 'alphanum', index: 2, isBkr: false, hasBkr: false};

  /* UDTS */
  this.udts = [];

  /* OPCODES */
  /* S */
  this.rules[0].opcodes = [];
  this.rules[0].opcodes[0] = {type: 1, children: [1,9]};// ALT
  this.rules[0].opcodes[1] = {type: 2, children: [2,3,4,5,6,7,8]};// CAT
  this.rules[0].opcodes[2] = {type: 9, string: [60]};// TLS
  this.rules[0].opcodes[3] = {type: 4, index: 1};// RNM(name)
  this.rules[0].opcodes[4] = {type: 9, string: [62]};// TLS
  this.rules[0].opcodes[5] = {type: 4, index: 0};// RNM(S)
  this.rules[0].opcodes[6] = {type: 9, string: [60,47]};// TLS
  this.rules[0].opcodes[7] = {type: 11, index: 1, lower: 'name', insensitive: true};// BKR(\%iname)
  this.rules[0].opcodes[8] = {type: 9, string: [62]};// TLS
  this.rules[0].opcodes[9] = {type: 9, string: [46,46,46]};// TLS

  /* name */
  this.rules[1].opcodes = [];
  this.rules[1].opcodes[0] = {type: 4, index: 2};// RNM(alphanum)

  /* alphanum */
  this.rules[2].opcodes = [];
  this.rules[2].opcodes[0] = {type: 2, children: [1,4]};// CAT
  this.rules[2].opcodes[1] = {type: 1, children: [2,3]};// ALT
  this.rules[2].opcodes[2] = {type: 8, min: 97, max: 122};// TRG
  this.rules[2].opcodes[3] = {type: 8, min: 65, max: 90};// TRG
  this.rules[2].opcodes[4] = {type: 3, min: 0, max: Infinity};// REP
  this.rules[2].opcodes[5] = {type: 1, children: [6,7,8]};// ALT
  this.rules[2].opcodes[6] = {type: 8, min: 97, max: 122};// TRG
  this.rules[2].opcodes[7] = {type: 8, min: 65, max: 90};// TRG
  this.rules[2].opcodes[8] = {type: 8, min: 48, max: 57};// TRG

  // The `toString()` function will display the original grammar file(s) that produced these opcodes.
  this.toString = function(){
    var str = "";
    str += "S = \"<\" name \">\" S \"</\" \\name \">\" / \"...\"\n";
    str += "name = alphanum\n";
    str += "alphanum        = (%d97-122/%d65-90) *(%d97-122/%d65-90/%d48-57)\n";
    return str;
  }
}
